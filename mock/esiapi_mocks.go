// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/abaeve/auth-esi-poller/esiapi (interfaces: AllianceApi,CorporationApi,CharacterApi)

package mocks

import (
	esi "github.com/antihax/goesi/esi"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
)

// Mock of AllianceApi interface
type MockAllianceApi struct {
	ctrl     *gomock.Controller
	recorder *_MockAllianceApiRecorder
}

// Recorder for MockAllianceApi (not exported)
type _MockAllianceApiRecorder struct {
	mock *MockAllianceApi
}

func NewMockAllianceApi(ctrl *gomock.Controller) *MockAllianceApi {
	mock := &MockAllianceApi{ctrl: ctrl}
	mock.recorder = &_MockAllianceApiRecorder{mock}
	return mock
}

func (_m *MockAllianceApi) EXPECT() *_MockAllianceApiRecorder {
	return _m.recorder
}

func (_m *MockAllianceApi) GetAlliancesAllianceId(_param0 int32, _param1 map[string]interface{}) (esi.GetAlliancesAllianceIdOk, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetAlliancesAllianceId", _param0, _param1)
	ret0, _ := ret[0].(esi.GetAlliancesAllianceIdOk)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockAllianceApiRecorder) GetAlliancesAllianceId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAlliancesAllianceId", arg0, arg1)
}

// Mock of CorporationApi interface
type MockCorporationApi struct {
	ctrl     *gomock.Controller
	recorder *_MockCorporationApiRecorder
}

// Recorder for MockCorporationApi (not exported)
type _MockCorporationApiRecorder struct {
	mock *MockCorporationApi
}

func NewMockCorporationApi(ctrl *gomock.Controller) *MockCorporationApi {
	mock := &MockCorporationApi{ctrl: ctrl}
	mock.recorder = &_MockCorporationApiRecorder{mock}
	return mock
}

func (_m *MockCorporationApi) EXPECT() *_MockCorporationApiRecorder {
	return _m.recorder
}

func (_m *MockCorporationApi) GetCorporationsCorporationId(_param0 int32, _param1 map[string]interface{}) (esi.GetCorporationsCorporationIdOk, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetCorporationsCorporationId", _param0, _param1)
	ret0, _ := ret[0].(esi.GetCorporationsCorporationIdOk)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCorporationApiRecorder) GetCorporationsCorporationId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCorporationsCorporationId", arg0, arg1)
}

// Mock of CharacterApi interface
type MockCharacterApi struct {
	ctrl     *gomock.Controller
	recorder *_MockCharacterApiRecorder
}

// Recorder for MockCharacterApi (not exported)
type _MockCharacterApiRecorder struct {
	mock *MockCharacterApi
}

func NewMockCharacterApi(ctrl *gomock.Controller) *MockCharacterApi {
	mock := &MockCharacterApi{ctrl: ctrl}
	mock.recorder = &_MockCharacterApiRecorder{mock}
	return mock
}

func (_m *MockCharacterApi) EXPECT() *_MockCharacterApiRecorder {
	return _m.recorder
}

func (_m *MockCharacterApi) GetCharactersCharacterId(_param0 int32, _param1 map[string]interface{}) (esi.GetCharactersCharacterIdOk, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "GetCharactersCharacterId", _param0, _param1)
	ret0, _ := ret[0].(esi.GetCharactersCharacterIdOk)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCharacterApiRecorder) GetCharactersCharacterId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCharactersCharacterId", arg0, arg1)
}
